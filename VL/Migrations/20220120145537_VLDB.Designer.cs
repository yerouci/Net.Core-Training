// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace VL.Migrations
{
    [DbContext(typeof(VLDBContext))]
    [Migration("20220120145537_VLDB")]
    partial class VLDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthorUser", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AuthorUser");
                });

            modelBuilder.Entity("Entities.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1899, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ernest Hemingway",
                            Nationality = "Estadounidense"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1809, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edgar Allan Poe",
                            Nationality = "Estadounidense"
                        });
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditorialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("Qualification")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("Entities.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qualification")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("review");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad3a09d1-9e45-4256-a3a1-9df71226375d"),
                            CreatedAt = new DateTime(2022, 1, 20, 14, 55, 36, 596, DateTimeKind.Utc).AddTicks(7391),
                            Email = "user1@gmail.com",
                            ImageURL = "http://user1Image.com/image.jpg",
                            Name = "User1"
                        },
                        new
                        {
                            Id = new Guid("e8a7d9e8-bbb3-44f2-b968-368cbbfc23c0"),
                            CreatedAt = new DateTime(2022, 1, 20, 14, 55, 36, 596, DateTimeKind.Utc).AddTicks(7940),
                            Email = "user2@gmail.com",
                            Name = "User2"
                        },
                        new
                        {
                            Id = new Guid("ded8654d-628f-4302-9b21-bba8b1f32186"),
                            CreatedAt = new DateTime(2022, 1, 20, 14, 55, 36, 596, DateTimeKind.Utc).AddTicks(7948),
                            Email = "user3@gmail.com",
                            ImageURL = "http://user3Image.com/image.jpg",
                            Name = "User3"
                        },
                        new
                        {
                            Id = new Guid("4125cf02-a9b1-428c-a388-4a40fbf0def6"),
                            CreatedAt = new DateTime(2022, 1, 20, 14, 55, 36, 596, DateTimeKind.Utc).AddTicks(7954),
                            Email = "user4@gmail.com",
                            ImageURL = "http://user4Image.com/image.jpg",
                            Name = "User4"
                        },
                        new
                        {
                            Id = new Guid("86402e28-f9d9-4e76-8cb2-1a8fbc390e45"),
                            CreatedAt = new DateTime(2022, 1, 20, 14, 55, 36, 596, DateTimeKind.Utc).AddTicks(7965),
                            Email = "user5@gmail.com",
                            Name = "User5"
                        });
                });

            modelBuilder.Entity("AuthorUser", b =>
                {
                    b.HasOne("Entities.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Entities.Models.Review", b =>
                {
                    b.HasOne("Entities.Models.Book", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BookId");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
